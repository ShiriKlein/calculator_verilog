
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_LITE_Golden_Top(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	//output		     [7:0]		HEX4,
	//output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [11:0]calc_res;
wire [1:0]select;


wire[3:0] H0,H1,H2,H3,H1_tmp;
wire if_dvd,error,offbit0,offbit1,offbit2,offbit3;
assign if_dvd=select[0]&select[1];

//=======================================================
//  Structural coding
//=======================================================
tff_x2 tff(.key(KEY),.clk(MAX10_CLK1_50),.rst(1'b1),.user_select(select));
Calculator_display F1(.data_in(SW[9:0]),.key(select),.data_out(calc_res));
Mux_res_dvd mux_hex( .res(calc_res),.Select(select),.H0(H0),.H1(H1),.H2(H2),.H3(H3));
control_ans control_error(.SW3_0(SW[3:0]),.select(select),.calc_res_5(calc_res[5]),.if_dvd(if_dvd),.error(error));
nand_control segment_ctrl(.if_dvd(if_dvd),.H1(H1),.H2(H2),.H3(H3),.offbit0(offbit0),.offbit1(offbit1),.offbit2(offbit2),.offbit3(offbit3));
Mux_4bit mux012(.A(H1), .dvd(H0),.Select(offbit0),.S(H1_tmp));

 
HEXDRV HEXDRV1(.switch(H0),.off_bit(offbit0),.error(error),.segments(HEX0[6:0]));
HEXDRV HEXDRV2(.switch(H1_tmp),.off_bit(offbit1),.error(error),.segments(HEX1[6:0])); 
HEXDRV HEXDRV3(.switch(H2),.off_bit(offbit2),.error(error),.segments(HEX2[6:0]));
HEXDRV HEXDRV4(.switch(H3),.off_bit(offbit3),.error(error),.segments(HEX3[6:0]));
assign HEX0[7]=~1'b0;
assign HEX1[7]=~1'b0;
assign HEX3[7]=~1'b0;
assign HEX2[7]=~if_dvd;


assign LEDR[0] = select[0];
assign LEDR[1] = select[1];

endmodule

